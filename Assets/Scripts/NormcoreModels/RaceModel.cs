using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class RaceModel
{
    [RealtimeProperty(1, true, true)] private double _gameStartTime;
    [RealtimeProperty(2, true, true)] private int _phase;
    [RealtimeProperty(3, true, true)] private bool _isOn;
    [RealtimeProperty(4, true, true)] private int _countDown;
}


/* ----- Begin Normal Autogenerated Code ----- */
public partial class RaceModel : RealtimeModel {
    public double gameStartTime {
        get {
            return _cache.LookForValueInCache(_gameStartTime, entry => entry.gameStartTimeSet, entry => entry.gameStartTime);
        }
        set {
            if (this.gameStartTime == value) return;
            _cache.UpdateLocalCache(entry => { entry.gameStartTimeSet = true; entry.gameStartTime = value; return entry; });
            InvalidateReliableLength();
            FireGameStartTimeDidChange(value);
        }
    }
    
    public int phase {
        get {
            return _cache.LookForValueInCache(_phase, entry => entry.phaseSet, entry => entry.phase);
        }
        set {
            if (this.phase == value) return;
            _cache.UpdateLocalCache(entry => { entry.phaseSet = true; entry.phase = value; return entry; });
            InvalidateReliableLength();
            FirePhaseDidChange(value);
        }
    }
    
    public bool isOn {
        get {
            return _cache.LookForValueInCache(_isOn, entry => entry.isOnSet, entry => entry.isOn);
        }
        set {
            if (this.isOn == value) return;
            _cache.UpdateLocalCache(entry => { entry.isOnSet = true; entry.isOn = value; return entry; });
            InvalidateReliableLength();
            FireIsOnDidChange(value);
        }
    }
    
    public int countDown {
        get {
            return _cache.LookForValueInCache(_countDown, entry => entry.countDownSet, entry => entry.countDown);
        }
        set {
            if (this.countDown == value) return;
            _cache.UpdateLocalCache(entry => { entry.countDownSet = true; entry.countDown = value; return entry; });
            InvalidateReliableLength();
            FireCountDownDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(RaceModel model, T value);
    public event PropertyChangedHandler<double> gameStartTimeDidChange;
    public event PropertyChangedHandler<int> phaseDidChange;
    public event PropertyChangedHandler<bool> isOnDidChange;
    public event PropertyChangedHandler<int> countDownDidChange;
    
    private struct LocalCacheEntry {
        public bool gameStartTimeSet;
        public double gameStartTime;
        public bool phaseSet;
        public int phase;
        public bool isOnSet;
        public bool isOn;
        public bool countDownSet;
        public int countDown;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        GameStartTime = 1,
        Phase = 2,
        IsOn = 3,
        CountDown = 4,
    }
    
    public RaceModel() : this(null) {
    }
    
    public RaceModel(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireGameStartTimeDidChange(double value) {
        try {
            gameStartTimeDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FirePhaseDidChange(int value) {
        try {
            phaseDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireIsOnDidChange(bool value) {
        try {
            isOnDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireCountDownDidChange(int value) {
        try {
            countDownDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteDoubleLength((uint)PropertyID.GameStartTime);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.Phase, (uint)_phase);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.IsOn, _isOn ? 1u : 0u);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.CountDown, (uint)_countDown);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.gameStartTimeSet) {
                length += WriteStream.WriteDoubleLength((uint)PropertyID.GameStartTime);
            }
            if (entry.phaseSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.Phase, (uint)entry.phase);
            }
            if (entry.isOnSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.IsOn, entry.isOn ? 1u : 0u);
            }
            if (entry.countDownSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.CountDown, (uint)entry.countDown);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteDouble((uint)PropertyID.GameStartTime, _gameStartTime);
            stream.WriteVarint32((uint)PropertyID.Phase, (uint)_phase);
            stream.WriteVarint32((uint)PropertyID.IsOn, _isOn ? 1u : 0u);
            stream.WriteVarint32((uint)PropertyID.CountDown, (uint)_countDown);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.gameStartTimeSet || entry.phaseSet || entry.isOnSet || entry.countDownSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.gameStartTimeSet) {
                stream.WriteDouble((uint)PropertyID.GameStartTime, entry.gameStartTime);
                didWriteProperties = true;
            }
            if (entry.phaseSet) {
                stream.WriteVarint32((uint)PropertyID.Phase, (uint)entry.phase);
                didWriteProperties = true;
            }
            if (entry.isOnSet) {
                stream.WriteVarint32((uint)PropertyID.IsOn, entry.isOn ? 1u : 0u);
                didWriteProperties = true;
            }
            if (entry.countDownSet) {
                stream.WriteVarint32((uint)PropertyID.CountDown, (uint)entry.countDown);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.GameStartTime: {
                    double previousValue = _gameStartTime;
                    _gameStartTime = stream.ReadDouble();
                    bool gameStartTimeExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.gameStartTimeSet);
                    if (!gameStartTimeExistsInChangeCache && _gameStartTime != previousValue) {
                        FireGameStartTimeDidChange(_gameStartTime);
                    }
                    break;
                }
                case (uint)PropertyID.Phase: {
                    int previousValue = _phase;
                    _phase = (int)stream.ReadVarint32();
                    bool phaseExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.phaseSet);
                    if (!phaseExistsInChangeCache && _phase != previousValue) {
                        FirePhaseDidChange(_phase);
                    }
                    break;
                }
                case (uint)PropertyID.IsOn: {
                    bool previousValue = _isOn;
                    _isOn = (stream.ReadVarint32() != 0);
                    bool isOnExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.isOnSet);
                    if (!isOnExistsInChangeCache && _isOn != previousValue) {
                        FireIsOnDidChange(_isOn);
                    }
                    break;
                }
                case (uint)PropertyID.CountDown: {
                    int previousValue = _countDown;
                    _countDown = (int)stream.ReadVarint32();
                    bool countDownExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.countDownSet);
                    if (!countDownExistsInChangeCache && _countDown != previousValue) {
                        FireCountDownDidChange(_countDown);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _gameStartTime = gameStartTime;
        _phase = phase;
        _isOn = isOn;
        _countDown = countDown;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
