using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class StatsModel
{
    [RealtimeProperty(1, true, false)] private int _kills;
    [RealtimeProperty(2, true, false)] private float _damageToTruck;
    [RealtimeProperty(3, true, false)] private int _powerUp;
    [RealtimeProperty(4, true, false)] private int _loot;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class StatsModel : RealtimeModel {
    public int kills {
        get {
            return _cache.LookForValueInCache(_kills, entry => entry.killsSet, entry => entry.kills);
        }
        set {
            if (this.kills == value) return;
            _cache.UpdateLocalCache(entry => { entry.killsSet = true; entry.kills = value; return entry; });
            InvalidateReliableLength();
        }
    }
    
    public float damageToTruck {
        get {
            return _cache.LookForValueInCache(_damageToTruck, entry => entry.damageToTruckSet, entry => entry.damageToTruck);
        }
        set {
            if (this.damageToTruck == value) return;
            _cache.UpdateLocalCache(entry => { entry.damageToTruckSet = true; entry.damageToTruck = value; return entry; });
            InvalidateReliableLength();
        }
    }
    
    public int powerUp {
        get {
            return _cache.LookForValueInCache(_powerUp, entry => entry.powerUpSet, entry => entry.powerUp);
        }
        set {
            if (this.powerUp == value) return;
            _cache.UpdateLocalCache(entry => { entry.powerUpSet = true; entry.powerUp = value; return entry; });
            InvalidateReliableLength();
        }
    }
    
    public int loot {
        get {
            return _cache.LookForValueInCache(_loot, entry => entry.lootSet, entry => entry.loot);
        }
        set {
            if (this.loot == value) return;
            _cache.UpdateLocalCache(entry => { entry.lootSet = true; entry.loot = value; return entry; });
            InvalidateReliableLength();
        }
    }
    
    private struct LocalCacheEntry {
        public bool killsSet;
        public int kills;
        public bool damageToTruckSet;
        public float damageToTruck;
        public bool powerUpSet;
        public int powerUp;
        public bool lootSet;
        public int loot;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        Kills = 1,
        DamageToTruck = 2,
        PowerUp = 3,
        Loot = 4,
    }
    
    public StatsModel() : this(null) {
    }
    
    public StatsModel(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint)PropertyID.Kills, (uint)_kills);
            length += WriteStream.WriteFloatLength((uint)PropertyID.DamageToTruck);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.PowerUp, (uint)_powerUp);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.Loot, (uint)_loot);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.killsSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.Kills, (uint)entry.kills);
            }
            if (entry.damageToTruckSet) {
                length += WriteStream.WriteFloatLength((uint)PropertyID.DamageToTruck);
            }
            if (entry.powerUpSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.PowerUp, (uint)entry.powerUp);
            }
            if (entry.lootSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.Loot, (uint)entry.loot);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteVarint32((uint)PropertyID.Kills, (uint)_kills);
            stream.WriteFloat((uint)PropertyID.DamageToTruck, _damageToTruck);
            stream.WriteVarint32((uint)PropertyID.PowerUp, (uint)_powerUp);
            stream.WriteVarint32((uint)PropertyID.Loot, (uint)_loot);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.killsSet || entry.damageToTruckSet || entry.powerUpSet || entry.lootSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.killsSet) {
                stream.WriteVarint32((uint)PropertyID.Kills, (uint)entry.kills);
                didWriteProperties = true;
            }
            if (entry.damageToTruckSet) {
                stream.WriteFloat((uint)PropertyID.DamageToTruck, entry.damageToTruck);
                didWriteProperties = true;
            }
            if (entry.powerUpSet) {
                stream.WriteVarint32((uint)PropertyID.PowerUp, (uint)entry.powerUp);
                didWriteProperties = true;
            }
            if (entry.lootSet) {
                stream.WriteVarint32((uint)PropertyID.Loot, (uint)entry.loot);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Kills: {
                    _kills = (int)stream.ReadVarint32();
                    break;
                }
                case (uint)PropertyID.DamageToTruck: {
                    _damageToTruck = stream.ReadFloat();
                    break;
                }
                case (uint)PropertyID.PowerUp: {
                    _powerUp = (int)stream.ReadVarint32();
                    break;
                }
                case (uint)PropertyID.Loot: {
                    _loot = (int)stream.ReadVarint32();
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _kills = kills;
        _damageToTruck = damageToTruck;
        _powerUp = powerUp;
        _loot = loot;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
