using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class LobbiestModel
{
    [RealtimeProperty(1, true, true)] private string _roomName;
    [RealtimeProperty(2, true, true)] private float _maxPlayers;
    [RealtimeProperty(3, true, true)] private bool _isReady;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class LobbiestModel : RealtimeModel {
    public string roomName {
        get {
            return _cache.LookForValueInCache(_roomName, entry => entry.roomNameSet, entry => entry.roomName);
        }
        set {
            if (this.roomName == value) return;
            _cache.UpdateLocalCache(entry => { entry.roomNameSet = true; entry.roomName = value; return entry; });
            InvalidateReliableLength();
            FireRoomNameDidChange(value);
        }
    }
    
    public float maxPlayers {
        get {
            return _cache.LookForValueInCache(_maxPlayers, entry => entry.maxPlayersSet, entry => entry.maxPlayers);
        }
        set {
            if (this.maxPlayers == value) return;
            _cache.UpdateLocalCache(entry => { entry.maxPlayersSet = true; entry.maxPlayers = value; return entry; });
            InvalidateReliableLength();
            FireMaxPlayersDidChange(value);
        }
    }
    
    public bool isReady {
        get {
            return _cache.LookForValueInCache(_isReady, entry => entry.isReadySet, entry => entry.isReady);
        }
        set {
            if (this.isReady == value) return;
            _cache.UpdateLocalCache(entry => { entry.isReadySet = true; entry.isReady = value; return entry; });
            InvalidateReliableLength();
            FireIsReadyDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(LobbiestModel model, T value);
    public event PropertyChangedHandler<string> roomNameDidChange;
    public event PropertyChangedHandler<float> maxPlayersDidChange;
    public event PropertyChangedHandler<bool> isReadyDidChange;
    
    private struct LocalCacheEntry {
        public bool roomNameSet;
        public string roomName;
        public bool maxPlayersSet;
        public float maxPlayers;
        public bool isReadySet;
        public bool isReady;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        RoomName = 1,
        MaxPlayers = 2,
        IsReady = 3,
    }
    
    public LobbiestModel() : this(null) {
    }
    
    public LobbiestModel(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireRoomNameDidChange(string value) {
        try {
            roomNameDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireMaxPlayersDidChange(float value) {
        try {
            maxPlayersDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireIsReadyDidChange(bool value) {
        try {
            isReadyDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteStringLength((uint)PropertyID.RoomName, _roomName);
            length += WriteStream.WriteFloatLength((uint)PropertyID.MaxPlayers);
            length += WriteStream.WriteVarint32Length((uint)PropertyID.IsReady, _isReady ? 1u : 0u);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.roomNameSet) {
                length += WriteStream.WriteStringLength((uint)PropertyID.RoomName, entry.roomName);
            }
            if (entry.maxPlayersSet) {
                length += WriteStream.WriteFloatLength((uint)PropertyID.MaxPlayers);
            }
            if (entry.isReadySet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.IsReady, entry.isReady ? 1u : 0u);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteString((uint)PropertyID.RoomName, _roomName);
            stream.WriteFloat((uint)PropertyID.MaxPlayers, _maxPlayers);
            stream.WriteVarint32((uint)PropertyID.IsReady, _isReady ? 1u : 0u);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.roomNameSet || entry.maxPlayersSet || entry.isReadySet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.roomNameSet) {
                stream.WriteString((uint)PropertyID.RoomName, entry.roomName);
                didWriteProperties = true;
            }
            if (entry.maxPlayersSet) {
                stream.WriteFloat((uint)PropertyID.MaxPlayers, entry.maxPlayers);
                didWriteProperties = true;
            }
            if (entry.isReadySet) {
                stream.WriteVarint32((uint)PropertyID.IsReady, entry.isReady ? 1u : 0u);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.RoomName: {
                    string previousValue = _roomName;
                    _roomName = stream.ReadString();
                    bool roomNameExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.roomNameSet);
                    if (!roomNameExistsInChangeCache && _roomName != previousValue) {
                        FireRoomNameDidChange(_roomName);
                    }
                    break;
                }
                case (uint)PropertyID.MaxPlayers: {
                    float previousValue = _maxPlayers;
                    _maxPlayers = stream.ReadFloat();
                    bool maxPlayersExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.maxPlayersSet);
                    if (!maxPlayersExistsInChangeCache && _maxPlayers != previousValue) {
                        FireMaxPlayersDidChange(_maxPlayers);
                    }
                    break;
                }
                case (uint)PropertyID.IsReady: {
                    bool previousValue = _isReady;
                    _isReady = (stream.ReadVarint32() != 0);
                    bool isReadyExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.isReadySet);
                    if (!isReadyExistsInChangeCache && _isReady != previousValue) {
                        FireIsReadyDidChange(_isReady);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _roomName = roomName;
        _maxPlayers = maxPlayers;
        _isReady = isReady;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
