using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class TruckModel
{
    [RealtimeProperty(1, true, true)]
    private int _owner;
    [RealtimeProperty(2, true, true)]
    private float _health;
    [RealtimeProperty(3, true, true)]
    private Vector3 _explosionPoint;
}


/* ----- Begin Normal Autogenerated Code ----- */
public partial class TruckModel : RealtimeModel {
    public int owner {
        get {
            return _cache.LookForValueInCache(_owner, entry => entry.ownerSet, entry => entry.owner);
        }
        set {
            if (this.owner == value) return;
            _cache.UpdateLocalCache(entry => { entry.ownerSet = true; entry.owner = value; return entry; });
            InvalidateReliableLength();
            FireOwnerDidChange(value);
        }
    }
    
    public float health {
        get {
            return _cache.LookForValueInCache(_health, entry => entry.healthSet, entry => entry.health);
        }
        set {
            if (this.health == value) return;
            _cache.UpdateLocalCache(entry => { entry.healthSet = true; entry.health = value; return entry; });
            InvalidateReliableLength();
            FireHealthDidChange(value);
        }
    }
    
    public UnityEngine.Vector3 forces {
        get {
            return _cache.LookForValueInCache(_explosionPoint, entry => entry.forcesSet, entry => entry.forces);
        }
        set {
            if (this.forces == value) return;
            _cache.UpdateLocalCache(entry => { entry.forcesSet = true; entry.forces = value; return entry; });
            InvalidateReliableLength();
            FireForcesDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(TruckModel model, T value);
    public event PropertyChangedHandler<int> ownerDidChange;
    public event PropertyChangedHandler<float> healthDidChange;
    public event PropertyChangedHandler<UnityEngine.Vector3> forcesDidChange;
    
    private struct LocalCacheEntry {
        public bool ownerSet;
        public int owner;
        public bool healthSet;
        public float health;
        public bool forcesSet;
        public UnityEngine.Vector3 forces;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        Owner = 1,
        Health = 2,
        Forces = 3,
    }
    
    public TruckModel() : this(null) {
    }
    
    public TruckModel(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireOwnerDidChange(int value) {
        try {
            ownerDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireHealthDidChange(float value) {
        try {
            healthDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireForcesDidChange(UnityEngine.Vector3 value) {
        try {
            forcesDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint)PropertyID.Owner, (uint)_owner);
            length += WriteStream.WriteFloatLength((uint)PropertyID.Health);
            length += WriteStream.WriteBytesLength((uint)PropertyID.Forces, WriteStream.Vector3ToBytesLength());
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.ownerSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.Owner, (uint)entry.owner);
            }
            if (entry.healthSet) {
                length += WriteStream.WriteFloatLength((uint)PropertyID.Health);
            }
            if (entry.forcesSet) {
                length += WriteStream.WriteBytesLength((uint)PropertyID.Forces, WriteStream.Vector3ToBytesLength());
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteVarint32((uint)PropertyID.Owner, (uint)_owner);
            stream.WriteFloat((uint)PropertyID.Health, _health);
            stream.WriteBytes((uint)PropertyID.Forces, WriteStream.Vector3ToBytes(_explosionPoint));
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.ownerSet || entry.healthSet || entry.forcesSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.ownerSet) {
                stream.WriteVarint32((uint)PropertyID.Owner, (uint)entry.owner);
                didWriteProperties = true;
            }
            if (entry.healthSet) {
                stream.WriteFloat((uint)PropertyID.Health, entry.health);
                didWriteProperties = true;
            }
            if (entry.forcesSet) {
                stream.WriteBytes((uint)PropertyID.Forces, WriteStream.Vector3ToBytes(entry.forces));
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.Owner: {
                    int previousValue = _owner;
                    _owner = (int)stream.ReadVarint32();
                    bool ownerExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.ownerSet);
                    if (!ownerExistsInChangeCache && _owner != previousValue) {
                        FireOwnerDidChange(_owner);
                    }
                    break;
                }
                case (uint)PropertyID.Health: {
                    float previousValue = _health;
                    _health = stream.ReadFloat();
                    bool healthExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.healthSet);
                    if (!healthExistsInChangeCache && _health != previousValue) {
                        FireHealthDidChange(_health);
                    }
                    break;
                }
                case (uint)PropertyID.Forces: {
                    UnityEngine.Vector3 previousValue = _explosionPoint;
                    _explosionPoint = ReadStream.Vector3FromBytes(stream.ReadBytes());
                    bool forcesExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.forcesSet);
                    if (!forcesExistsInChangeCache && _explosionPoint != previousValue) {
                        FireForcesDidChange(_explosionPoint);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _owner = owner;
        _health = health;
        _explosionPoint = forces;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
