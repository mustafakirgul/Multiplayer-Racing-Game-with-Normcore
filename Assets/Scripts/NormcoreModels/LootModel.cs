using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class LootModel
{
    [RealtimeProperty(1, true, true)] private int _id;
    [RealtimeProperty(2, true, true)] private int _collectedBy;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class LootModel : RealtimeModel
{
    public int id
    {
        get { return _cache.LookForValueInCache(_id, entry => entry.idSet, entry => entry.id); }
        set
        {
            if (this.id == value) return;
            _cache.UpdateLocalCache(entry =>
            {
                entry.idSet = true;
                entry.id = value;
                return entry;
            });
            InvalidateReliableLength();
            FireIdDidChange(value);
        }
    }

    public int collectedBy
    {
        get
        {
            return _cache.LookForValueInCache(_collectedBy, entry => entry.collectedBySet, entry => entry.collectedBy);
        }
        set
        {
            if (this.collectedBy == value) return;
            _cache.UpdateLocalCache(entry =>
            {
                entry.collectedBySet = true;
                entry.collectedBy = value;
                return entry;
            });
            InvalidateReliableLength();
            FireCollectedByDidChange(value);
        }
    }

    public delegate void PropertyChangedHandler<in T>(LootModel model, T value);

    public event PropertyChangedHandler<int> idDidChange;
    public event PropertyChangedHandler<int> collectedByDidChange;

    private struct LocalCacheEntry
    {
        public bool idSet;
        public int id;
        public bool collectedBySet;
        public int collectedBy;
    }

    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();

    public enum PropertyID : uint
    {
        Id = 1,
        CollectedBy = 2,
    }

    public LootModel() : this(null)
    {
    }

    public LootModel(RealtimeModel parent) : base(null, parent)
    {
    }

    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent)
    {
        UnsubscribeClearCacheCallback();
    }

    private void FireIdDidChange(int value)
    {
        try
        {
            idDidChange?.Invoke(this, value);
        }
        catch (System.Exception exception)
        {
            UnityEngine.Debug.LogException(exception);
        }
    }

    private void FireCollectedByDidChange(int value)
    {
        try
        {
            collectedByDidChange?.Invoke(this, value);
        }
        catch (System.Exception exception)
        {
            UnityEngine.Debug.LogException(exception);
        }
    }

    protected override int WriteLength(StreamContext context)
    {
        int length = 0;
        if (context.fullModel)
        {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint) PropertyID.Id, (uint) _id);
            length += WriteStream.WriteVarint32Length((uint) PropertyID.CollectedBy, (uint) _collectedBy);
        }
        else if (context.reliableChannel)
        {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.idSet)
            {
                length += WriteStream.WriteVarint32Length((uint) PropertyID.Id, (uint) entry.id);
            }

            if (entry.collectedBySet)
            {
                length += WriteStream.WriteVarint32Length((uint) PropertyID.CollectedBy, (uint) entry.collectedBy);
            }
        }

        return length;
    }

    protected override void Write(WriteStream stream, StreamContext context)
    {
        var didWriteProperties = false;

        if (context.fullModel)
        {
            stream.WriteVarint32((uint) PropertyID.Id, (uint) _id);
            stream.WriteVarint32((uint) PropertyID.CollectedBy, (uint) _collectedBy);
        }
        else if (context.reliableChannel)
        {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.idSet || entry.collectedBySet)
            {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }

            if (entry.idSet)
            {
                stream.WriteVarint32((uint) PropertyID.Id, (uint) entry.id);
                didWriteProperties = true;
            }

            if (entry.collectedBySet)
            {
                stream.WriteVarint32((uint) PropertyID.CollectedBy, (uint) entry.collectedBy);
                didWriteProperties = true;
            }

            if (didWriteProperties) InvalidateReliableLength();
        }
    }

    protected override void Read(ReadStream stream, StreamContext context)
    {
        while (stream.ReadNextPropertyID(out uint propertyID))
        {
            switch (propertyID)
            {
                case (uint) PropertyID.Id:
                {
                    int previousValue = _id;
                    _id = (int) stream.ReadVarint32();
                    bool idExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.idSet);
                    if (!idExistsInChangeCache && _id != previousValue)
                    {
                        FireIdDidChange(_id);
                    }

                    break;
                }
                case (uint) PropertyID.CollectedBy:
                {
                    int previousValue = _collectedBy;
                    _collectedBy = (int) stream.ReadVarint32();
                    bool collectedByExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.collectedBySet);
                    if (!collectedByExistsInChangeCache && _collectedBy != previousValue)
                    {
                        FireCollectedByDidChange(_collectedBy);
                    }

                    break;
                }
                default:
                {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }

    #region Cache Operations

    private StreamEventDispatcher _streamEventDispatcher;

    private void FlattenCache()
    {
        _id = id;
        _collectedBy = collectedBy;
        _cache.Clear();
    }

    private void ClearCache(uint updateID)
    {
        _cache.RemoveUpdateFromInflight(updateID);
    }

    private void ClearCacheOnStreamCallback(StreamContext context)
    {
        if (_streamEventDispatcher != context.dispatcher)
        {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }

        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }

    private void UnsubscribeClearCacheCallback()
    {
        if (_streamEventDispatcher != null)
        {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }

    #endregion
}
/* ----- End Normal Autogenerated Code ----- */