using UnityEngine;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class PlayerModel
{
    [RealtimeProperty(1, true, true)]
    private string _playerName;
    [RealtimeProperty(2, true, true)]
    private float _health;
    [RealtimeProperty(3, true, true)]
    private Vector3 _forces;
}

/* ----- Begin Normal Autogenerated Code ----- */
public partial class PlayerModel : RealtimeModel
{
    public string playerName
    {
        get
        {
            return _cache.LookForValueInCache(_playerName, entry => entry.playerNameSet, entry => entry.playerName);
        }
        set
        {
            if (this.playerName == value) return;
            _cache.UpdateLocalCache(entry => { entry.playerNameSet = true; entry.playerName = value; return entry; });
            InvalidateReliableLength();
            FirePlayerNameDidChange(value);
        }
    }

    public float health
    {
        get
        {
            return _cache.LookForValueInCache(_health, entry => entry.healthSet, entry => entry.health);
        }
        set
        {
            if (this.health == value) return;
            _cache.UpdateLocalCache(entry => { entry.healthSet = true; entry.health = value; return entry; });
            InvalidateReliableLength();
            FireHealthDidChange(value);
        }
    }

    public UnityEngine.Vector3 forces
    {
        get
        {
            return _cache.LookForValueInCache(_forces, entry => entry.forcesSet, entry => entry.forces);
        }
        set
        {
            if (this.forces == value) return;
            _cache.UpdateLocalCache(entry => { entry.forcesSet = true; entry.forces = value; return entry; });
            InvalidateReliableLength();
            FireForcesDidChange(value);
        }
    }

    public delegate void PropertyChangedHandler<in T>(PlayerModel model, T value);
    public event PropertyChangedHandler<string> playerNameDidChange;
    public event PropertyChangedHandler<float> healthDidChange;
    public event PropertyChangedHandler<UnityEngine.Vector3> forcesDidChange;

    private struct LocalCacheEntry
    {
        public bool playerNameSet;
        public string playerName;
        public bool healthSet;
        public float health;
        public bool forcesSet;
        public UnityEngine.Vector3 forces;
    }

    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();

    public enum PropertyID : uint
    {
        PlayerName = 1,
        Health = 2,
        Forces = 3,
    }

    public PlayerModel() : this(null)
    {
    }

    public PlayerModel(RealtimeModel parent) : base(null, parent)
    {
    }

    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent)
    {
        UnsubscribeClearCacheCallback();
    }

    private void FirePlayerNameDidChange(string value)
    {
        try
        {
            playerNameDidChange?.Invoke(this, value);
        }
        catch (System.Exception exception)
        {
            UnityEngine.Debug.LogException(exception);
        }
    }

    private void FireHealthDidChange(float value)
    {
        try
        {
            healthDidChange?.Invoke(this, value);
        }
        catch (System.Exception exception)
        {
            UnityEngine.Debug.LogException(exception);
        }
    }

    private void FireForcesDidChange(UnityEngine.Vector3 value)
    {
        try
        {
            forcesDidChange?.Invoke(this, value);
        }
        catch (System.Exception exception)
        {
            UnityEngine.Debug.LogException(exception);
        }
    }

    protected override int WriteLength(StreamContext context)
    {
        int length = 0;
        if (context.fullModel)
        {
            FlattenCache();
            length += WriteStream.WriteStringLength((uint)PropertyID.PlayerName, _playerName);
            length += WriteStream.WriteFloatLength((uint)PropertyID.Health);
            length += WriteStream.WriteBytesLength((uint)PropertyID.Forces, WriteStream.Vector3ToBytesLength());
        }
        else if (context.reliableChannel)
        {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.playerNameSet)
            {
                length += WriteStream.WriteStringLength((uint)PropertyID.PlayerName, entry.playerName);
            }
            if (entry.healthSet)
            {
                length += WriteStream.WriteFloatLength((uint)PropertyID.Health);
            }
            if (entry.forcesSet)
            {
                length += WriteStream.WriteBytesLength((uint)PropertyID.Forces, WriteStream.Vector3ToBytesLength());
            }
        }
        return length;
    }

    protected override void Write(WriteStream stream, StreamContext context)
    {
        var didWriteProperties = false;

        if (context.fullModel)
        {
            stream.WriteString((uint)PropertyID.PlayerName, _playerName);
            stream.WriteFloat((uint)PropertyID.Health, _health);
            stream.WriteBytes((uint)PropertyID.Forces, WriteStream.Vector3ToBytes(_forces));
        }
        else if (context.reliableChannel)
        {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.playerNameSet || entry.healthSet || entry.forcesSet)
            {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.playerNameSet)
            {
                stream.WriteString((uint)PropertyID.PlayerName, entry.playerName);
                didWriteProperties = true;
            }
            if (entry.healthSet)
            {
                stream.WriteFloat((uint)PropertyID.Health, entry.health);
                didWriteProperties = true;
            }
            if (entry.forcesSet)
            {
                stream.WriteBytes((uint)PropertyID.Forces, WriteStream.Vector3ToBytes(entry.forces));
                didWriteProperties = true;
            }

            if (didWriteProperties) InvalidateReliableLength();
        }
    }

    protected override void Read(ReadStream stream, StreamContext context)
    {
        while (stream.ReadNextPropertyID(out uint propertyID))
        {
            switch (propertyID)
            {
                case (uint)PropertyID.PlayerName:
                    {
                        string previousValue = _playerName;
                        _playerName = stream.ReadString();
                        bool playerNameExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.playerNameSet);
                        if (!playerNameExistsInChangeCache && _playerName != previousValue)
                        {
                            FirePlayerNameDidChange(_playerName);
                        }
                        break;
                    }
                case (uint)PropertyID.Health:
                    {
                        float previousValue = _health;
                        _health = stream.ReadFloat();
                        bool healthExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.healthSet);
                        if (!healthExistsInChangeCache && _health != previousValue)
                        {
                            FireHealthDidChange(_health);
                        }
                        break;
                    }
                case (uint)PropertyID.Forces:
                    {
                        UnityEngine.Vector3 previousValue = _forces;
                        _forces = ReadStream.Vector3FromBytes(stream.ReadBytes());
                        bool forcesExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.forcesSet);
                        if (!forcesExistsInChangeCache && _forces != previousValue)
                        {
                            FireForcesDidChange(_forces);
                        }
                        break;
                    }
                default:
                    {
                        stream.SkipProperty();
                        break;
                    }
            }
        }
    }

    #region Cache Operations

    private StreamEventDispatcher _streamEventDispatcher;

    private void FlattenCache()
    {
        _playerName = playerName;
        _health = health;
        _forces = forces;
        _cache.Clear();
    }

    private void ClearCache(uint updateID)
    {
        _cache.RemoveUpdateFromInflight(updateID);
    }

    private void ClearCacheOnStreamCallback(StreamContext context)
    {
        if (_streamEventDispatcher != context.dispatcher)
        {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }

    private void UnsubscribeClearCacheCallback()
    {
        if (_streamEventDispatcher != null)
        {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }

    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
