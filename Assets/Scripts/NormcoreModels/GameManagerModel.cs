using UnityEngine;
using System.Collections.Generic;
using Normal.Realtime;
using Normal.Realtime.Serialization;

[RealtimeModel]
public partial class GameManagerModel 
{
    [RealtimeProperty(1, true, true)]
    private int _currentSceneNumber;

    [RealtimeProperty(2, true, true)]
    private float _currentGameTimer;

    //[RealtimeProperty(3, true, true)]
    //private List<GameWinConditions> _winCons = new List<GameWinConditions>();
}



/* ----- Begin Normal Autogenerated Code ----- */
public partial class GameManagerModel : RealtimeModel {
    public int currentSceneNumber {
        get {
            return _cache.LookForValueInCache(_currentSceneNumber, entry => entry.currentSceneNumberSet, entry => entry.currentSceneNumber);
        }
        set {
            if (this.currentSceneNumber == value) return;
            _cache.UpdateLocalCache(entry => { entry.currentSceneNumberSet = true; entry.currentSceneNumber = value; return entry; });
            InvalidateReliableLength();
            FireCurrentSceneNumberDidChange(value);
        }
    }
    
    public float currentGameTimer {
        get {
            return _cache.LookForValueInCache(_currentGameTimer, entry => entry.currentGameTimerSet, entry => entry.currentGameTimer);
        }
        set {
            if (this.currentGameTimer == value) return;
            _cache.UpdateLocalCache(entry => { entry.currentGameTimerSet = true; entry.currentGameTimer = value; return entry; });
            InvalidateReliableLength();
            FireCurrentGameTimerDidChange(value);
        }
    }
    
    public delegate void PropertyChangedHandler<in T>(GameManagerModel model, T value);
    public event PropertyChangedHandler<int> currentSceneNumberDidChange;
    public event PropertyChangedHandler<float> currentGameTimerDidChange;
    
    private struct LocalCacheEntry {
        public bool currentSceneNumberSet;
        public int currentSceneNumber;
        public bool currentGameTimerSet;
        public float currentGameTimer;
    }
    
    private LocalChangeCache<LocalCacheEntry> _cache = new LocalChangeCache<LocalCacheEntry>();
    
    public enum PropertyID : uint {
        CurrentSceneNumber = 1,
        CurrentGameTimer = 2,
    }
    
    public GameManagerModel() : this(null) {
    }
    
    public GameManagerModel(RealtimeModel parent) : base(null, parent) {
    }
    
    protected override void OnParentReplaced(RealtimeModel previousParent, RealtimeModel currentParent) {
        UnsubscribeClearCacheCallback();
    }
    
    private void FireCurrentSceneNumberDidChange(int value) {
        try {
            currentSceneNumberDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    private void FireCurrentGameTimerDidChange(float value) {
        try {
            currentGameTimerDidChange?.Invoke(this, value);
        } catch (System.Exception exception) {
            UnityEngine.Debug.LogException(exception);
        }
    }
    
    protected override int WriteLength(StreamContext context) {
        int length = 0;
        if (context.fullModel) {
            FlattenCache();
            length += WriteStream.WriteVarint32Length((uint)PropertyID.CurrentSceneNumber, (uint)_currentSceneNumber);
            length += WriteStream.WriteFloatLength((uint)PropertyID.CurrentGameTimer);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.currentSceneNumberSet) {
                length += WriteStream.WriteVarint32Length((uint)PropertyID.CurrentSceneNumber, (uint)entry.currentSceneNumber);
            }
            if (entry.currentGameTimerSet) {
                length += WriteStream.WriteFloatLength((uint)PropertyID.CurrentGameTimer);
            }
        }
        return length;
    }
    
    protected override void Write(WriteStream stream, StreamContext context) {
        var didWriteProperties = false;
        
        if (context.fullModel) {
            stream.WriteVarint32((uint)PropertyID.CurrentSceneNumber, (uint)_currentSceneNumber);
            stream.WriteFloat((uint)PropertyID.CurrentGameTimer, _currentGameTimer);
        } else if (context.reliableChannel) {
            LocalCacheEntry entry = _cache.localCache;
            if (entry.currentSceneNumberSet || entry.currentGameTimerSet) {
                _cache.PushLocalCacheToInflight(context.updateID);
                ClearCacheOnStreamCallback(context);
            }
            if (entry.currentSceneNumberSet) {
                stream.WriteVarint32((uint)PropertyID.CurrentSceneNumber, (uint)entry.currentSceneNumber);
                didWriteProperties = true;
            }
            if (entry.currentGameTimerSet) {
                stream.WriteFloat((uint)PropertyID.CurrentGameTimer, entry.currentGameTimer);
                didWriteProperties = true;
            }
            
            if (didWriteProperties) InvalidateReliableLength();
        }
    }
    
    protected override void Read(ReadStream stream, StreamContext context) {
        while (stream.ReadNextPropertyID(out uint propertyID)) {
            switch (propertyID) {
                case (uint)PropertyID.CurrentSceneNumber: {
                    int previousValue = _currentSceneNumber;
                    _currentSceneNumber = (int)stream.ReadVarint32();
                    bool currentSceneNumberExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.currentSceneNumberSet);
                    if (!currentSceneNumberExistsInChangeCache && _currentSceneNumber != previousValue) {
                        FireCurrentSceneNumberDidChange(_currentSceneNumber);
                    }
                    break;
                }
                case (uint)PropertyID.CurrentGameTimer: {
                    float previousValue = _currentGameTimer;
                    _currentGameTimer = stream.ReadFloat();
                    bool currentGameTimerExistsInChangeCache = _cache.ValueExistsInCache(entry => entry.currentGameTimerSet);
                    if (!currentGameTimerExistsInChangeCache && _currentGameTimer != previousValue) {
                        FireCurrentGameTimerDidChange(_currentGameTimer);
                    }
                    break;
                }
                default: {
                    stream.SkipProperty();
                    break;
                }
            }
        }
    }
    
    #region Cache Operations
    
    private StreamEventDispatcher _streamEventDispatcher;
    
    private void FlattenCache() {
        _currentSceneNumber = currentSceneNumber;
        _currentGameTimer = currentGameTimer;
        _cache.Clear();
    }
    
    private void ClearCache(uint updateID) {
        _cache.RemoveUpdateFromInflight(updateID);
    }
    
    private void ClearCacheOnStreamCallback(StreamContext context) {
        if (_streamEventDispatcher != context.dispatcher) {
            UnsubscribeClearCacheCallback(); // unsub from previous dispatcher
        }
        _streamEventDispatcher = context.dispatcher;
        _streamEventDispatcher.AddStreamCallback(context.updateID, ClearCache);
    }
    
    private void UnsubscribeClearCacheCallback() {
        if (_streamEventDispatcher != null) {
            _streamEventDispatcher.RemoveStreamCallback(ClearCache);
            _streamEventDispatcher = null;
        }
    }
    
    #endregion
}
/* ----- End Normal Autogenerated Code ----- */
